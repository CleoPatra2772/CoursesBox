{"version":3,"file":"main.3ceec16a8d87f8268009.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;AAEA;AACA;;;AAOA;AAMA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAGA;AAAA;AAAA;AAGA;AAAA;AAAA;AAGA;AAAA;AAAA;AAMA;AACA;AAAA;AAAA;AAKA;AAIA;AAAA;AAAA;AAiBA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAMA;AAGA;AAAA;AACA;AAAA;AAEA;AAAA;AANA;AANA;AAAA","sources":["webpack://coursesbox/./component/Input/Input.tsx"],"sourcesContent":["import { FC, ChangeEventHandler, InputHTMLAttributes, ReactChild } from \"react\";\nimport styled from \"@emotion/styled\";\n\nimport { Icon, AvailableIcons } from \"@/components/Icon\";\nimport { boxShadow } from \"@/components/styles\";\nimport { useId } from \"@/components/hooks/useId\";\n\ntype StyledInputProps = {\n  withIcon: boolean;\n};\n\nconst StyledInput = styled.input<StyledInputProps>`\n  all: unset;\n  width: 20rem;\n  height: 4rem;\n  border-radius: 1rem;\n  font-size: 1.4rem;\n  padding-left: ${({ withIcon }) => (withIcon ? 2.8 : 1.4)}rem;\n  color: ${({ theme }) => theme.font.regular};\n  ${({ theme }) =>\n    boxShadow(theme.components.shadow1, theme.components.shadow2, true)}\n  &::placeholder {\n    color: ${({ theme }) => theme.font.placeholder};\n  }\n  &:focus {\n    ${({ theme }) =>\n      boxShadow(theme.components.shadow1, theme.components.shadow2)}\n    ~ svg {\n      color: ${({ theme }) => theme.font.regular};\n      opacity: 1;\n    }\n  }\n`;\n\nconst Label = styled.label`\n  color: ${({ theme }) => theme.font.regular};\n  font-size: 1rem;\n  padding-left: 1.4rem;\n`;\n\nconst StyledIcon = styled(Icon)`\n  display: block;\n  margin-top: -3rem;\n  padding-left: 0.5rem;\n  color: ${({ theme }) => theme.font.placeholder};\n  opacity: 0.7;\n`;\n\nexport type Props = {\n  /** Input label */\n  label: string;\n  /** Placeholder  */\n  placeholder: string;\n  /** onChange handler */\n  onChange: ChangeEventHandler<HTMLInputElement>;\n  /** Icon */\n  icon?: AvailableIcons;\n  /** Feedback for input */\n  feedback?: ReactChild;\n};\n\nexport const Input: FC<Props & InputHTMLAttributes<HTMLInputElement>> = ({\n  label,\n  icon,\n  feedback,\n  ...props\n}) => (\n  <Label>\n    {label}\n    <br />\n    <StyledInput withIcon={Boolean(icon)} {...props} />\n    {icon && <StyledIcon name={icon} />}\n    <br />\n    <Label>{feedback}</Label>\n  </Label>\n);\n\n\n\n\n// import { FC, ChangeEventHandler, InputHTMLAttributes, ReactNode } from 'react';\n// import styled from \"@emotion/styled\";\n// import { boxShadow } from '../styles';\n// import { useId } from '@/component/hooks/useId';\n// import { AvailableIcons, Icon } from '../Icon';\n\n// type StyledInputProps = {\n//     withIcon: boolean;\n//   };\n\n\n// const StyledInput = styled.input<StyledInputProps>`\n// all: unset;\n// width: 20rem;\n// height: 4rem;\n// border-radius: 1rem;\n// font-size: 1.4rem;\n// padding-left: padding-left: ${({ withIcon }) => (withIcon ? 2.8 : 1.4)}rem;\n// color: ${({ theme }) => theme.font.regular};\n// ${({ theme }) =>\n//     boxShadow(theme.components.shadow1, theme.components.shadow2, true)}\n//   &::placeholder {\n//     color: ${({ theme }) => theme.font.placeholder};\n//   }\n//   &:focus {\n//     ${({ theme }) =>\n//       boxShadow(theme.components.shadow1, theme.components.shadow2)}\n//     ~ svg {\n//       color: ${({ theme }) => theme.font.regular};\n//       opacity: 1;\n\n//     }\n//   }\n// `;\n\n// const Label = styled.label`\n// color: ${({ theme }) => theme.font.regular};\n// font-size: 1rem;\n// padding-left: 1.4rem;\n// `;\n\n// const StyledIcon = styled(Icon)`\n// display: block;\n// margin-top: -3rem;\n// padding-left: 0.5rem;\n// color:${({ theme }) => theme.font.placeholder};\n// opacity: 0.7;\n// `;\n\n// export type Props = {\n//     label: string;\n//     onChange: ChangeEventHandler<HTMLInputElement>;\n//     icon?: AvailableIcons;\n//     feedback?: ReactNode;\n// };\n\n// export const Input: FC<Props & InputHTMLAttributes <HTMLInputElement>> = ({\n//     label,\n//     icon,\n//     feedback,\n//     ...props\n    \n// }) => {\n//     const fieldId = useId();\n//     return (\n//     <label>\n//         {label}\n//         <br />\n//         <StyledInput withIcon={Boolean(icon)} { ...props} />\n//         {icon && <StyledIcon name={icon} />}\n//         <br />\n//         <label>{feedback}</label>\n//     </label>\n//     )\n// }"],"names":[],"sourceRoot":""}