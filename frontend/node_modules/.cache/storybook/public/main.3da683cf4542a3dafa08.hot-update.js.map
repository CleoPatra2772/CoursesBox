{"version":3,"file":"main.3da683cf4542a3dafa08.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA;AACA;AAEA;;;AAIA;AAOA;AAAA;AAAA;AACA;AAAA;AAAA;AAGA;AAAA;AAAA;AAGA;AAAA;AAAA;AAGA;AAAA;AAAA;AAYA;AAIA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAKA;AAEA;AAAA;AAAA;AAIA;AAKA;AAmBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AASA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAEA;AACA;AAFA;AAIA;AAAA;AALA;AAOA;AAAA;AATA;AATA;AAAA","sources":["webpack://coursesbox/./component/Input/Input.tsx"],"sourcesContent":["\n\nimport { FC, ChangeEventHandler, InputHTMLAttributes, ReactNode } from 'react';\nimport styled from \"@emotion/styled\";\nimport { boxShadow } from '../styles';\nimport { useId } from '@/component/hooks/useId';\nimport { AvailableIcons, Icon } from '../Icon';\n\n\n\nconst StyledInput = styled.input`\n  all: unset;\n  width: 100%;\n  height: 100%;\n  border-radius: 1rem;\n  font-size: 1.4rem;\n  padding: 0 2.6rem 0 1.4rem;\n  color: ${({ theme }) => theme.font.regular};\n  ${({ theme }) =>\n    boxShadow(theme.components.shadow1, theme.components.shadow2, true)}\n  &::placeholder {\n    color: ${({ theme }) => theme.font.placeholder};\n  }\n  &:focus {\n    ${({ theme }) =>\n      boxShadow(theme.components.shadow1, theme.components.shadow2)}\n    ~ svg {\n      color: ${({ theme }) => theme.font.regular};\n      opacity: 1;\n    }\n  }\n`;\n\ntype LabelProps ={\n  height?: number;\n  width?: number;\n};\n\n\nconst Label = styled.label<LabelProps>`\ndisplay: flex;\njustify-content: flex-start;\nflex-direction: column;\n  color: ${({ theme }) => theme.font.regular};\n  height:${({ height }) => height}rem;\n  width: ${({ width }) => width}rem;\n  font-size: 1rem;\n  padding-left: 1.4rem;\n`;\n\nconst StyledIcon = styled(Icon)`\n  margin-left: -2.5rem;\n  color: ${({ theme }) => theme.font.placeholder};\n  opacity: 0.7;\n`;\n\nconst InputWrapper = styled.div`\ndisplay: flex;\nalign-items: center;\n`\n\nconst Text = styled.span`\npadding-left: 1.4rem;\n`\n\nexport type Props = {\n  /** Input label */\n  label?: string;\n  /** Placeholder  */\n  placeholder: string;\n  /** onChange handler */\n  onChange: ChangeEventHandler<HTMLInputElement>;\n  /** Icon */\n  icon?: AvailableIcons;\n  /** Feedback for input */\n  feedback?: ReactNode;\n  // height?: number;\n  // width?: number;\n} & LabelProps;\n\nexport const Input: FC<Props & InputHTMLAttributes<HTMLInputElement>> = ({\n  width =20,\n  height = 7,\n  label,\n  icon,\n  feedback,\n  className,\n  ...props\n}) => (\n  <Label height={height} width={width} className={className}>\n    {label && <Text>{label}</Text>}\n    <InputWrapper>\n    <StyledInput \n    height = {height}\n    width = {width}\n     {...props} />\n    {icon && <StyledIcon name={icon} />}\n    </InputWrapper>\n    {feedback && <Text>{feedback}</Text>}\n    \n  </Label>\n);\n\n\n\n\n// import { FC, ChangeEventHandler, InputHTMLAttributes, ReactNode } from 'react';\n// import styled from \"@emotion/styled\";\n// import { boxShadow } from '../styles';\n// import { useId } from '@/component/hooks/useId';\n// import { AvailableIcons, Icon } from '../Icon';\n\n// type StyledInputProps = {\n//     withIcon: boolean;\n//   };\n\n\n// const StyledInput = styled.input<StyledInputProps>`\n// all: unset;\n// width: 20rem;\n// height: 4rem;\n// border-radius: 1rem;\n// font-size: 1.4rem;\n// padding-left: padding-left: ${({ withIcon }) => (withIcon ? 2.8 : 1.4)}rem;\n// color: ${({ theme }) => theme.font.regular};\n// ${({ theme }) =>\n//     boxShadow(theme.components.shadow1, theme.components.shadow2, true)}\n//   &::placeholder {\n//     color: ${({ theme }) => theme.font.placeholder};\n//   }\n//   &:focus {\n//     ${({ theme }) =>\n//       boxShadow(theme.components.shadow1, theme.components.shadow2)}\n//     ~ svg {\n//       color: ${({ theme }) => theme.font.regular};\n//       opacity: 1;\n\n//     }\n//   }\n// `;\n\n// const Label = styled.label`\n// color: ${({ theme }) => theme.font.regular};\n// font-size: 1rem;\n// padding-left: 1.4rem;\n// `;\n\n// const StyledIcon = styled(Icon)`\n// display: block;\n// margin-top: -3rem;\n// padding-left: 0.5rem;\n// color:${({ theme }) => theme.font.placeholder};\n// opacity: 0.7;\n// `;\n\n// export type Props = {\n//     label: string;\n//     onChange: ChangeEventHandler<HTMLInputElement>;\n//     icon?: AvailableIcons;\n//     feedback?: ReactNode;\n// };\n\n// export const Input: FC<Props & InputHTMLAttributes <HTMLInputElement>> = ({\n//     label,\n//     icon,\n//     feedback,\n//     ...props\n    \n// }) => {\n//     const fieldId = useId();\n//     return (\n//     <label>\n//         {label}\n//         <br />\n//         <StyledInput withIcon={Boolean(icon)} { ...props} />\n//         {icon && <StyledIcon name={icon} />}\n//         <br />\n//         <label>{feedback}</label>\n//     </label>\n//     )\n// }"],"names":[],"sourceRoot":""}